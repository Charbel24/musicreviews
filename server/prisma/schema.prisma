// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model User {
  id    Int   @id @default(autoincrement())
  email   String    @unique
  password    String
  name    String
  isAdmin Boolean @default(false)
  reviews     Review[]
  comments  Comment[]
  reports   Report[]
  ownedAlbums Album[]   @relation("OwnedAlbums")
  ownershipRequests OwnershipRequest[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Album {
  id    Int   @id @default(autoincrement())
  title   String
  artist    String
  year    Int
  genre   String
  imageUrl    String
  ownerId     Int?
  owner       User?     @relation("OwnedAlbums", fields: [ownerId], references: [id])
  reviews     Review[]
  reports   Report[]
  ownershipRequests OwnershipRequest[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Review {
  id    Int   @id @default(autoincrement())
  content   String
  rating    Int
  userId  Int
  user    User    @relation(fields: [userId],references: [id])
  albumId   Int
  album   Album @relation(fields: [albumId],references: [id])
  comments  Comment[]
  reports   Report[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  Int
  isOwnerResponse Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        Int      @id @default(autoincrement())
  content   String
  type      String   // "ALBUM" or "REVIEW"
  status    String   @default("PENDING") // "PENDING", "RESOLVED", or "DISMISSED"
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  album     Album?   @relation(fields: [albumId], references: [id])
  albumId   Int?
  review    Review?  @relation(fields: [reviewId], references: [id])
  reviewId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OwnershipRequest {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  album     Album    @relation(fields: [albumId], references: [id])
  albumId   Int
  status    String   @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}